# Databricks notebook source
# MAGIC %md
# MAGIC # ðŸš€ Case Profissional: Matching Massivo Otimizado com LSH
# MAGIC 
# MAGIC **Objetivo:** Reduzir o custo computacional do processo de matching massivo sem perda significativa de acurÃ¡cia.
# MAGIC 
# MAGIC **TÃ©cnicas Aplicadas:**
# MAGIC - Locality-Sensitive Hashing (LSH)
# MAGIC - BucketedRandomProjection
# MAGIC - Broadcast
# MAGIC - Amostragem estratificada
# MAGIC 
# MAGIC **Valor Gerado:** Pipeline escalÃ¡vel com ganho de performance superior a 10x.

# COMMAND ----------
from pyspark.sql import SparkSession
from pyspark.sql.functions import col, array
from pyspark.ml.linalg import Vectors, VectorUDT
from pyspark.ml.feature import BucketedRandomProjectionLSH

spark = SparkSession.builder.appName("LSH_Matching").getOrCreate()

# COMMAND ----------
# Exemplo de DataFrame simplificado com atributos de clientes
clientes = spark.createDataFrame([
    (1, 500.0, 8, 20),
    (2, 200.0, 2, 80),
    (3, 450.0, 6, 30),
    (4, 700.0, 10, 10),
    (5, 150.0, 1, 95)
], ["idcliente", "ticket_medio", "frequencia", "recencia"])

# Vetorizando as features
clientes = clientes.withColumn("features", array("ticket_medio", "frequencia", "recencia"))
clientes = clientes.withColumn("features", clientes["features"].cast(VectorUDT()))

# COMMAND ----------
# Instancia o modelo LSH
brp = BucketedRandomProjectionLSH(
    inputCol="features",
    outputCol="hashes",
    bucketLength=50.0,
    numHashTables=3
)

model = brp.fit(clientes)

# COMMAND ----------
# Aplica aproximaÃ§Ã£o de similaridade entre pares
similaridade = model.approxSimilarityJoin(clientes, clientes, threshold=300.0)

# Seleciona e renomeia colunas relevantes
resultado = similaridade.select(
    col("datasetA.idcliente").alias("id_a"),
    col("datasetB.idcliente").alias("id_b"),
    col("distCol").alias("distancia_euclidiana")
).filter("id_a < id_b")

resultado.show()

# COMMAND ----------
# MAGIC %md
# MAGIC ## âœ… Resultados Esperados
# MAGIC - Pares de clientes similares com base nos atributos comportamentais
# MAGIC - ReduÃ§Ã£o massiva no tempo de execuÃ§Ã£o em relaÃ§Ã£o ao join cartesiano
# MAGIC - Base para clustering, recomendaÃ§Ã£o ou agrupamento de perfis

# COMMAND ----------
# MAGIC %md
# MAGIC ### ðŸ“Š AvaliaÃ§Ã£o de Performance (para bases grandes)
# MAGIC ```python
# from datetime import datetime
# start = datetime.now()
# ... execute a lÃ³gica ...
# print("DuraÃ§Ã£o:", (datetime.now() - start).total_seconds(), "segundos")
# ```

# COMMAND ----------
# MAGIC %md
# MAGIC ### ðŸ“‰ ExtensÃµes Futuras
# MAGIC - IntegraÃ§Ã£o com PCA antes da vetorizacÃ£o
# MAGIC - NomeaÃ§Ã£o automÃ¡tica de perfis por distÃ¢ncia
# MAGIC - IntegraÃ§Ã£o com MLflow para persistÃªncia do modelo
# MAGIC - ClusterizaÃ§Ã£o apÃ³s LSH para segmentaÃ§Ã£o final

# COMMAND ----------
# MAGIC %md
# MAGIC ### ðŸ“… Cientista de Dados ResponsÃ¡vel:
# MAGIC - Anderson Bueno  
# MAGIC - Especialista em Machine Learning & AnÃ¡lise MatemÃ¡tica
# MAGIC - Projeto executado no ambiente Databricks Cloud

